(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{482:function(o,n,t){"use strict";t.r(n),n.default="// hash function copy from https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat noise(float x) {\n    float f = fract(x);\n    float i = floor(x);\n\n    float a = hash11(i);\n    float b = hash11(i + 1.0);\n\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, fract(iTime * .3) < .5 ? f : u);\n}\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){    \n    vec2 pos = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    float y = (noise(pos.x * 3.5 + iTime * 1.) * 2. - 1.) * .5;\n    float y2 = (noise(pos.x * 4. + iTime * 3.) * 2. - 1.) * .3;\n    float y3 = (noise(pos.x * 5.5 + iTime * 5.) * 2. - 1.) * .2;\n\n    float pct = plot(pos, y);\n    float pct2 = plot(pos, y2);\n    float pct3 = plot(pos, y3);\n\n    vec3 color = vec3(1.0);\n    color = (1.0 - pct) * color + pct * vec3(0.6, .4, 1.);\n    color = (1.0 - pct2) * color + pct2 * vec3(1., .4, .6);\n    color = (1.0 - pct3) * color + pct3 * vec3(.4, .6, 1.);\n\n    fragColor = vec4(color, 1.0);\n}"}}]);